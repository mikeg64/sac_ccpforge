!##############################################################################
! module vacphys - mhd

INCLUDE:vacphys.mhd0.t

!=============================================================================

SUBROUTINE keeppositive(ix^L,w)

  ! Keep pressure and density positive (following D.Ryu)

  USE constants
  USE common_variables

  INTEGER::          ix^L
  REAL(kind=8):: w(ixG^T,nw)
  LOGICAL:: toosmallp
  !-----------------------------------------------------------------------------


  ! Where rho is small use vacuum state: rho=vacuumrho, v=0, p=smallp, same B
  WHERE((w(ix^S,rho_)+w(ix^S,rhob_))<smallrho)
     ^C&w(ix^S,m^C_)=zero;
!!!      ^C&w(ix^S,m^C_)=w(ix^S,m^C_)/w(ix^S,rho_)*vacuumrho;
     w(ix^S,rho_)=vacuumrho-w(ix^S,rhob_)
     w(ix^S,e_)=smallp/(eqpar(gamma_)-one)+half*(^C&w(ix^S,b^C_)**2+)-w(ix^S,eb_)
  endwhere


  ! Calculate pressure without clipping toosmall values (.false.)
  CALL getpthermal(w,ix^L,tmp)

  toosmallp=ANY(tmp(ix^S)<MAX(zero,smallp))

  IF(toosmallp)THEN
     nerror(toosmallp_)=nerror(toosmallp_)+1
     IF(nerror(toosmallp_)==1)THEN
        WRITE(*,'(a,i2,a,i7)')&
             'Too small pressure (code=',toosmallp_,') at it=',it
        WRITE(*,*)'Value < smallp: ',MINVAL(tmp(ix^S)),smallp
        !     write(*,*)'Location: ',minloc(tmp(ix^S)) !F77_  
        {WRITE(*,*)'Processor:',ipe ^IFMPI}
     ENDIF
     IF(smallp>zero)&
          w(ix^S,e_)=MAX(tmp(ix^S),smallp)/(eqpar(gamma_)-1)+&
          half*((^C&w(ix^S,m^C_)**2+)/w(ix^S,rho_)+(^C&w(ix^S,b^C_)**2+))-w(ix^S,eb_)
  ENDIF

  RETURN
END SUBROUTINE keeppositive

!=============================================================================
! end module vacphys - mhd
!##############################################################################
